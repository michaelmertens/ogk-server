"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const error_codes_1 = require("../shared/error-codes");
var logger = require('log4js').getLogger('[ogk] [error handler]');
class CustomError {
    constructor(key, params) {
        this.error = { key };
        if (params) {
            this.error.params = params;
        }
    }
}
exports.CustomError = CustomError;
function createErrorMessage(key, params) {
    return new CustomError(key, params);
}
exports.createErrorMessage = createErrorMessage;
function isCustomError(err) {
    return err && err.error && err.error.key;
}
exports.isCustomError = isCustomError;
function handleErrors(res, sourceLogger) {
    return function (err) {
        let errorString = (err && err.message) ? err.message : JSON.stringify(err);
        if (sourceLogger) {
            sourceLogger.error(errorString);
        }
        else {
            logger.error(errorString);
        }
        if (!res.headersSent) {
            if (isCustomError(err)) {
                displayConstructedErrorToUser(err, res);
            }
            else {
                showServiceDownMessage(res);
            }
        }
    };
}
exports.handleErrors = handleErrors;
function displayConstructedErrorToUser(err, res) {
    let errorKey = err.error.key;
    switch (errorKey) {
        case error_codes_1.default.ERROR_NOT_AUTHENTICATED:
            res.status(401).send(err);
            break;
        case error_codes_1.default.ERROR_NOT_AUTHORIZED:
            res.status(403).send(err);
            break;
        case error_codes_1.default.ERROR_NOT_FOUND:
            res.status(404).send(err);
            break;
        case error_codes_1.default.ERROR_BAD_REQUEST:
            res.status(404).send(err);
            break;
        default:
            res.status(500).send(err);
            break;
    }
}
function showServiceDownMessage(res) {
    res.status(500).send(new CustomError(error_codes_1.default.ERROR_SERVICE_FAILURE));
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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SSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFCLEtBQUssQ0FBQztJQUNkLENBQUM7QUFDTCxDQUFDO0FBRUQsZ0NBQWdDLEdBQWE7SUFDekMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxXQUFXLENBQUMscUJBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7QUFDNUUsQ0FBQyIsImZpbGUiOiJzZXJ2aWNlcy9lcnJvci1zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZXNwb25zZX0gZnJvbSBcImV4cHJlc3Mtc2VydmUtc3RhdGljLWNvcmVcIjtcclxuaW1wb3J0IHtMb2dnZXJ9IGZyb20gXCJsb2c0anNcIjtcclxuaW1wb3J0IGVycm9yQ29kZXMgZnJvbSBcIi4uL3NoYXJlZC9lcnJvci1jb2Rlc1wiO1xyXG52YXIgbG9nZ2VyOiBMb2dnZXIgPSByZXF1aXJlKCdsb2c0anMnKS5nZXRMb2dnZXIoJ1tvZ2tdIFtlcnJvciBoYW5kbGVyXScpO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21FcnJvciB7XHJcbiAgICBlcnJvcjoge1xyXG4gICAgICAgIGtleTogc3RyaW5nO1xyXG4gICAgICAgIHBhcmFtcz86IGFueTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3RydWN0b3Ioa2V5OiBzdHJpbmcsIHBhcmFtcyA/OiBBcnJheTxzdHJpbmc+KSB7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IHtrZXl9O1xyXG4gICAgICAgIGlmIChwYXJhbXMpIHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvci5wYXJhbXMgPSBwYXJhbXM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JNZXNzYWdlKGtleTogYW55LCBwYXJhbXM/OiBhbnkpOiBDdXN0b21FcnJvciB7XHJcbiAgICByZXR1cm4gbmV3IEN1c3RvbUVycm9yKGtleSwgcGFyYW1zKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQ3VzdG9tRXJyb3IoZXJyKSB7XHJcbiAgICByZXR1cm4gZXJyICYmIGVyci5lcnJvciAmJiBlcnIuZXJyb3Iua2V5O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRXJyb3JzKHJlczogUmVzcG9uc2UsIHNvdXJjZUxvZ2dlcj86IExvZ2dlcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICBsZXQgZXJyb3JTdHJpbmcgPSAoZXJyICYmIGVyci5tZXNzYWdlKSA/IGVyci5tZXNzYWdlIDogSlNPTi5zdHJpbmdpZnkoZXJyKTtcclxuICAgICAgICBpZiAoc291cmNlTG9nZ2VyKSB7XHJcbiAgICAgICAgICAgIHNvdXJjZUxvZ2dlci5lcnJvcihlcnJvclN0cmluZyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGVycm9yU3RyaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFyZXMuaGVhZGVyc1NlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGlzQ3VzdG9tRXJyb3IoZXJyKSkge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheUNvbnN0cnVjdGVkRXJyb3JUb1VzZXIoZXJyLCByZXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2hvd1NlcnZpY2VEb3duTWVzc2FnZShyZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkaXNwbGF5Q29uc3RydWN0ZWRFcnJvclRvVXNlcihlcnI6Q3VzdG9tRXJyb3IsIHJlczogUmVzcG9uc2Upe1xyXG4gICAgbGV0IGVycm9yS2V5ID0gZXJyLmVycm9yLmtleTtcclxuICAgIHN3aXRjaCAoZXJyb3JLZXkpIHtcclxuICAgICAgICBjYXNlIGVycm9yQ29kZXMuRVJST1JfTk9UX0FVVEhFTlRJQ0FURUQ6XHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNDAxKS5zZW5kKGVycik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgZXJyb3JDb2Rlcy5FUlJPUl9OT1RfQVVUSE9SSVpFRDpcclxuICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDMpLnNlbmQoZXJyKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBlcnJvckNvZGVzLkVSUk9SX05PVF9GT1VORDpcclxuICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoZXJyKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBlcnJvckNvZGVzLkVSUk9SX0JBRF9SRVFVRVNUOlxyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuc2VuZChlcnIpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDUwMCkuc2VuZChlcnIpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd1NlcnZpY2VEb3duTWVzc2FnZShyZXM6IFJlc3BvbnNlKXtcclxuICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKG5ldyBDdXN0b21FcnJvcihlcnJvckNvZGVzLkVSUk9SX1NFUlZJQ0VfRkFJTFVSRSkpO1xyXG59Il0sInNvdXJjZVJvb3QiOiIuLiJ9
