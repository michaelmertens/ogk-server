"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const authService = require("../../services/auth-service");
const kingsCupService = require("../../services/games/kingscup-service");
const error_service_1 = require("../../services/error-service");
const Log4js = require("log4js");
const logger = Log4js.getLogger('[ogk] [kingscup facade]');
class KingsCupFacade {
    static getRulebook(req, res) {
        let id = req.params.id;
        kingsCupService.getRulebook(id)
            .then((result) => {
            res.send(result);
        })
            .catch(error_service_1.handleErrors(res, logger))
            .done();
    }
    static getRulebooks(req, res) {
        kingsCupService.getRulebooks()
            .then((result) => {
            res.send({
                _embedded: {
                    rulebooks: result
                }
            });
        })
            .catch(error_service_1.handleErrors(res, logger))
            .done();
    }
    static addRulebook(req, res) {
        let rulebook = req.body;
        authService.getAuthenticatedUser(req)
            .then((user) => {
            return kingsCupService.addRulebook(rulebook, user);
        })
            .catch(error_service_1.handleErrors(res, logger))
            .done();
    }
    static updateRulebook(req, res) {
        let id = req.params.id;
        let rulebook = req.body;
        authService.getAuthenticatedUser(req)
            .then((user) => {
            return kingsCupService.updateRulebook(rulebook, user);
        })
            .then(result => res.send(result))
            .catch(error_service_1.handleErrors(res, logger))
            .done();
    }
    static removeRulebook(req, res) {
        let id = req.params.id;
        let rulebook = req.body;
        authService.getAuthenticatedUser(req)
            .then((user) => kingsCupService.removeRulebook(rulebook, user))
            .then(result => res.send('Rulebook deleted'))
            .catch(error_service_1.handleErrors(res, logger))
            .done();
    }
}
exports.KingsCupFacade = KingsCupFacade;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZhY2FkZXMvZ2FtZXMva2luZ3NjdXAtZmFjYWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMkRBQTJEO0FBQzNELHlFQUF5RTtBQUN6RSxnRUFBMEQ7QUFDMUQsaUNBQWlDO0FBS2pDLE1BQU0sTUFBTSxHQUFXLE1BQU0sQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUVuRTtJQUVJLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBWSxFQUFFLEdBQWE7UUFDMUMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDdkIsZUFBZSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7YUFDMUIsSUFBSSxDQUFDLENBQUMsTUFBTTtZQUNULEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLDRCQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQ2hDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQVksRUFBRSxHQUFhO1FBQzNDLGVBQWUsQ0FBQyxZQUFZLEVBQUU7YUFDekIsSUFBSSxDQUFDLENBQUMsTUFBTTtZQUNULEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ0wsU0FBUyxFQUFFO29CQUNQLFNBQVMsRUFBRSxNQUFNO2lCQUNwQjthQUNKLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyw0QkFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUNoQyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFZLEVBQUUsR0FBYTtRQUMxQyxJQUFJLFFBQVEsR0FBcUIsR0FBRyxDQUFDLElBQUksQ0FBQztRQUUxQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDO2FBQ2hDLElBQUksQ0FBQyxDQUFDLElBQWtCO1lBQ3JCLE1BQU0sQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsNEJBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDaEMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBWSxFQUFFLEdBQWE7UUFDN0MsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDdkIsSUFBSSxRQUFRLEdBQXFCLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFFMUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQzthQUNoQyxJQUFJLENBQUMsQ0FBQyxJQUFrQjtZQUNyQixNQUFNLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUQsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ2hDLEtBQUssQ0FBQyw0QkFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUNoQyxJQUFJLEVBQUUsQ0FBQztJQUVoQixDQUFDO0lBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFZLEVBQUUsR0FBYTtRQUM3QyxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUN2QixJQUFJLFFBQVEsR0FBcUIsR0FBRyxDQUFDLElBQUksQ0FBQztRQUUxQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDO2FBQ2hDLElBQUksQ0FBQyxDQUFDLElBQWtCLEtBQUssZUFBZSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDNUUsSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7YUFDNUMsS0FBSyxDQUFDLDRCQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQ2hDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7Q0FFSjtBQTdERCx3Q0E2REMiLCJmaWxlIjoiZmFjYWRlcy9nYW1lcy9raW5nc2N1cC1mYWNhZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JlcXVlc3QsIFJlc3BvbnNlfSBmcm9tIFwiZXhwcmVzcy1zZXJ2ZS1zdGF0aWMtY29yZVwiO1xyXG5pbXBvcnQgKiBhcyBhdXRoU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hdXRoLXNlcnZpY2UnO1xyXG5pbXBvcnQgKiBhcyBraW5nc0N1cFNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZ2FtZXMva2luZ3NjdXAtc2VydmljZSc7XHJcbmltcG9ydCB7aGFuZGxlRXJyb3JzfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvZXJyb3Itc2VydmljZVwiO1xyXG5pbXBvcnQgKiBhcyBMb2c0anMgZnJvbSAnbG9nNGpzJztcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcImxvZzRqc1wiO1xyXG5pbXBvcnQgeyBLaW5nc0N1cFJ1bGVib29rIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9jb250cmFjdHMvZ2FtZXMtY29udHJhY3RcIjtcclxuaW1wb3J0IHsgSVVzZXJTZXNzaW9uIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9jb250cmFjdHMvdXNlci1jb250cmFjdFwiO1xyXG5cclxuY29uc3QgbG9nZ2VyOiBMb2dnZXIgPSBMb2c0anMuZ2V0TG9nZ2VyKCdbb2drXSBba2luZ3NjdXAgZmFjYWRlXScpO1xyXG5cclxuZXhwb3J0IGNsYXNzIEtpbmdzQ3VwRmFjYWRlIHtcclxuXHJcbiAgICBzdGF0aWMgZ2V0UnVsZWJvb2socmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSB7XHJcbiAgICAgICAgbGV0IGlkID0gcmVxLnBhcmFtcy5pZDtcclxuICAgICAgICBraW5nc0N1cFNlcnZpY2UuZ2V0UnVsZWJvb2soaWQpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlcy5zZW5kKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvcnMocmVzLCBsb2dnZXIpKVxyXG4gICAgICAgICAgICAuZG9uZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRSdWxlYm9va3MocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSB7XHJcbiAgICAgICAga2luZ3NDdXBTZXJ2aWNlLmdldFJ1bGVib29rcygpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlcy5zZW5kKHtcclxuICAgICAgICAgICAgICAgICAgICBfZW1iZWRkZWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZWJvb2tzOiByZXN1bHRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9ycyhyZXMsIGxvZ2dlcikpXHJcbiAgICAgICAgICAgIC5kb25lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFkZFJ1bGVib29rKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkge1xyXG4gICAgICAgIGxldCBydWxlYm9vazogS2luZ3NDdXBSdWxlYm9vayA9IHJlcS5ib2R5O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGF1dGhTZXJ2aWNlLmdldEF1dGhlbnRpY2F0ZWRVc2VyKHJlcSlcclxuICAgICAgICAgICAgLnRoZW4oKHVzZXI6IElVc2VyU2Vzc2lvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtpbmdzQ3VwU2VydmljZS5hZGRSdWxlYm9vayhydWxlYm9vaywgdXNlcik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvcnMocmVzLCBsb2dnZXIpKVxyXG4gICAgICAgICAgICAuZG9uZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB1cGRhdGVSdWxlYm9vayhyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpIHtcclxuICAgICAgICBsZXQgaWQgPSByZXEucGFyYW1zLmlkO1xyXG4gICAgICAgIGxldCBydWxlYm9vazogS2luZ3NDdXBSdWxlYm9vayA9IHJlcS5ib2R5O1xyXG5cclxuICAgICAgICBhdXRoU2VydmljZS5nZXRBdXRoZW50aWNhdGVkVXNlcihyZXEpXHJcbiAgICAgICAgICAgIC50aGVuKCh1c2VyOiBJVXNlclNlc3Npb24pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBraW5nc0N1cFNlcnZpY2UudXBkYXRlUnVsZWJvb2socnVsZWJvb2ssIHVzZXIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXN1bHQgPT4gcmVzLnNlbmQocmVzdWx0KSlcclxuICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9ycyhyZXMsIGxvZ2dlcikpXHJcbiAgICAgICAgICAgIC5kb25lKCk7XHJcblxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdGF0aWMgcmVtb3ZlUnVsZWJvb2socmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSB7XHJcbiAgICAgICAgbGV0IGlkID0gcmVxLnBhcmFtcy5pZDtcclxuICAgICAgICBsZXQgcnVsZWJvb2s6IEtpbmdzQ3VwUnVsZWJvb2sgPSByZXEuYm9keTtcclxuXHJcbiAgICAgICAgYXV0aFNlcnZpY2UuZ2V0QXV0aGVudGljYXRlZFVzZXIocmVxKVxyXG4gICAgICAgICAgICAudGhlbigodXNlcjogSVVzZXJTZXNzaW9uKSA9PiBraW5nc0N1cFNlcnZpY2UucmVtb3ZlUnVsZWJvb2socnVsZWJvb2ssIHVzZXIpKVxyXG4gICAgICAgICAgICAudGhlbihyZXN1bHQgPT4gcmVzLnNlbmQoJ1J1bGVib29rIGRlbGV0ZWQnKSlcclxuICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9ycyhyZXMsIGxvZ2dlcikpXHJcbiAgICAgICAgICAgIC5kb25lKCk7XHJcbiAgICB9XHJcblxyXG59Il0sInNvdXJjZVJvb3QiOiIuLlxcLi4ifQ==
