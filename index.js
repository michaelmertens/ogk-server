"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const session = require("express-session");
const passport = require("passport");
const LocalStrategy = require("passport-local");
const compression = require("compression");
const cookieParser = require("cookie-parser");
const AuthFacade = require("./facades/auth-facade");
const GamesFacade = require("./facades/games-facade");
const events_facade_1 = require("./facades/events-facade");
const news_facade_1 = require("./facades/news-facade");
const dbInitializer = require("./repositories/db-initializer");
const path = require("path");
const bodyParser = require("body-parser");
const log4js = require("log4js");
const cors = require("cors");
const app_config_1 = require("./app-config");
const app_security_1 = require("./app-security");
var logger = log4js.getLogger('[ogk] [index]');
var app = express();
var mongodb = require('mongodb'), mongoClient = mongodb.MongoClient, ObjectID = mongodb.ObjectID, // Used in API endpoints
db; // We'll initialize connection below
app.use(bodyParser.json());
app.set('port', process.env.PORT || 8080);
// SECURITY CONFIGURATION
// =============================================================================
app.use(cors()); // CORS (Cross-Origin Resource Sharing) headers to support Cross-site HTTP requests
app.use((req, res, next) => {
    if (app_config_1.default.isDev) {
        var originHeader = req.get('origin');
        if (originHeader) {
            var matches = originHeader.match(/^((http|https):\/\/localhost:([0-9]{4}))(.*)/);
            if (matches && matches.length > 1) {
                res.header('Access-Control-Allow-Credentials', 'true');
                res.header("Access-Control-Allow-Origin", matches[1]);
                res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
                res.header("Access-Control-Allow-Methods", "PUT, POST, GET, OPTIONS, DELETE, PATCH");
            }
        }
    }
    next();
});
let sessionCookieConfig = {
    maxAge: 3600000 * 24 * 21 // 21 days
};
if (app_config_1.default.isDev) {
    logger.warn("Local development mode");
}
else {
    sessionCookieConfig.secure = true;
    app.use(app_security_1.default.forceSsl);
}
app.use(cookieParser());
app.use(session({
    secret: app_config_1.default.SESSION_SECRET,
    proxy: true,
    cookie: sessionCookieConfig,
    saveUninitialized: true,
    resave: true
}));
app.use(passport.initialize());
app.use(passport.session());
app.use(compression());
passport.use('local-signup', new LocalStrategy({
    // by default, local strategy uses username and password, we will override with email
    usernameField: 'email',
    passwordField: 'password',
    passReqToCallback: true // allows us to pass back the entire request to the callback
}, function (req, email, password, done) {
    // asynchronous
    // User.findOne wont fire unless data is sent back
    process.nextTick(function () {
        // find a user whose email is the same as the forms email
        // we are checking to see if the user trying to login already exists
        return done(null, {
            email: "developer@ogk.be",
            firstName: "developmer"
        });
    });
}));
passport.serializeUser(function (user, done) {
    done(null, user); // TODO: Retrieve user data from database instead of saving to session
});
passport.deserializeUser(function (user, done) {
    done(null, user);
});
app.post('/login', passport.authenticate('local', { failureRedirect: '/login' }), function (req, res) {
    res.redirect('/');
});
// APPLICATION
// =============================================================================
app.use(express.static(path.join(__dirname, '/public')));
// Error handler
app.use(function (err, req, res, next) {
    res.status(err.status || 500);
    res.json({
        message: err.message,
        error: (app.get('env') === 'development' ? err : {})
    });
    next(err);
});
// Start application and initialize DB Connection
app.listen(app.get('port'), function () {
    dbInitializer.initConnection()
        .then(() => {
        logger.info(`OGK is now running on port ${app.get('port')}!`);
    });
});
process.on('SIGINT', function () {
    dbInitializer.closeDBConnections();
    process.exit(0);
});
// ROUTES FOR OUR API
// =============================================================================
// middleware to use for all requests
app.all('/api*', AuthFacade.requireAuthentication);
app.use(function (req, res, next) {
    // do logging
    logger.info(req.method + " " + req.url);
    next();
});
// more routes for our API will happen here
app.use('/api/events', events_facade_1.EventsFacade.router);
app.use('/api/games', GamesFacade.router);
app.use('/api/news', news_facade_1.NewsFacade.router);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
