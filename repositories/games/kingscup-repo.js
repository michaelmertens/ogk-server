"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Q = require("q");
const mongoose = require("mongoose");
const errorService = require("../../services/error-service");
const error_codes_1 = require("../../shared/error-codes");
var KingsCupRulebookModel;
function initializeSchema() {
    KingsCupRulebookModel = mongoose.model('KingsCupRulebook', exports.KingsCupRulebookSchema);
}
exports.initializeSchema = initializeSchema;
// GETTERS
function getById(id) {
    return Q.Promise(function (resolve, reject) {
        KingsCupRulebookModel.findById(id, { "__v": 0 })
            .exec((err, result) => {
            if (err) {
                reject(err);
            }
            else if (!result) {
                reject(errorService.createErrorMessage(error_codes_1.default.ERROR_NOT_FOUND));
            }
            else {
                resolve(result);
            }
        });
    });
}
exports.getById = getById;
function getByKey(key) {
    return Q.Promise(function (resolve, reject) {
        KingsCupRulebookModel.find({ 'id': key }, { "__v": 0 })
            .exec((err, result) => {
            if (err) {
                reject(err);
            }
            else if (!result) {
                reject(errorService.createErrorMessage(error_codes_1.default.ERROR_NOT_FOUND));
            }
            else {
                resolve(result);
            }
        });
    });
}
exports.getByKey = getByKey;
function getAll() {
    return Q.Promise((resolve, reject) => {
        KingsCupRulebookModel.find({})
            .exec((err, results) => {
            if (err) {
                reject(err);
            }
            resolve(results);
        });
    });
}
exports.getAll = getAll;
;
// MODIFIERS
function create(rulebook) {
    let obj = new KingsCupRulebookModel(rulebook);
    return Q.ninvoke(obj, "save")
        .then((result) => {
        return result[0];
    });
}
exports.create = create;
function update(rulebook) {
    return Q.ninvoke(rulebook, "save")
        .then((result) => {
        return result[0].toObject();
    });
}
exports.update = update;
// REMOVE
function remove(rulebook) {
    return Q.Promise(function (resolve, reject) {
        KingsCupRulebookModel.findByIdAndRemove(rulebook.key)
            .exec((err, result) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(result);
            }
        });
    });
}
exports.remove = remove;
// SCHEMA
exports.KingsCupRulebookSchema = new mongoose.Schema({
    id: { type: String, indexed: true },
    name: { type: String },
    author: { type: String },
    description: { type: String },
    readOnly: { type: Boolean },
    rule1: { type: String },
    rule2: { type: String },
    rule3: { type: String },
    rule4: { type: String },
    rule5: { type: String },
    rule6: { type: String },
    rule7: { type: String },
    rule8: { type: String },
    rule9: { type: String },
    rule10: { type: String },
    rule11: { type: String },
    rule12: { type: String },
    rule13: { type: String },
}, {
    timestamps: true
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcG9zaXRvcmllcy9nYW1lcy9raW5nc2N1cC1yZXBvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUJBQXVCO0FBRXZCLHFDQUFxQztBQUNyQyw2REFBNkQ7QUFDN0QsMERBQWtEO0FBR2xELElBQUkscUJBQXFCLENBQUM7QUFFMUI7SUFDSSxxQkFBcUIsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLGtCQUFrQixFQUFFLDhCQUFzQixDQUFDLENBQUM7QUFDdkYsQ0FBQztBQUZELDRDQUVDO0FBRUQsVUFBVTtBQUNWLGlCQUF3QixFQUFVO0lBQzlCLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsT0FBTyxFQUFFLE1BQU07UUFDdEMscUJBQXFCLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsQ0FBQzthQUN4QyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsTUFBd0I7WUFDaEMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDTixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEIsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLE1BQU0sQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMscUJBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFBO1lBQ3ZFLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDO0FBYkQsMEJBYUM7QUFFRCxrQkFBeUIsR0FBVztJQUNoQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLE9BQU8sRUFBRSxNQUFNO1FBQ3RDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFB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QUM7SUFDM0IsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBQztJQUV6QixLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDO0lBQ3JCLEtBQUssRUFBRSxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUM7SUFDckIsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQztJQUNyQixLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDO0lBQ3JCLEtBQUssRUFBRSxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUM7SUFDckIsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQztJQUNyQixLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDO0lBQ3JCLEtBQUssRUFBRSxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUM7SUFDckIsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQztJQUNyQixNQUFNLEVBQUUsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDO0lBQ3RCLE1BQU0sRUFBRSxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUM7SUFDdEIsTUFBTSxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQztJQUN0QixNQUFNLEVBQUUsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDO0NBQ3pCLEVBQ0Q7SUFDSSxVQUFVLEVBQUUsSUFBSTtDQUNuQixDQUFDLENBQUMiLCJmaWxlIjoicmVwb3NpdG9yaWVzL2dhbWVzL2tpbmdzY3VwLXJlcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBRIGZyb20gJ3EnO1xyXG5pbXBvcnQgKiBhcyBMb2c0anMgZnJvbSAnbG9nNGpzJztcclxuaW1wb3J0ICogYXMgbW9uZ29vc2UgZnJvbSBcIm1vbmdvb3NlXCI7XHJcbmltcG9ydCAqIGFzIGVycm9yU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9lcnJvci1zZXJ2aWNlJztcclxuaW1wb3J0IGVycm9yQ29kZXMgZnJvbSAnLi4vLi4vc2hhcmVkL2Vycm9yLWNvZGVzJztcclxuaW1wb3J0IHsgS2luZ3NDdXBSdWxlYm9vayB9IGZyb20gXCIuLi8uLi9zaGFyZWQvY29udHJhY3RzL2dhbWVzLWNvbnRyYWN0XCI7XHJcblxyXG52YXIgS2luZ3NDdXBSdWxlYm9va01vZGVsO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVTY2hlbWEoKSB7XHJcbiAgICBLaW5nc0N1cFJ1bGVib29rTW9kZWwgPSBtb25nb29zZS5tb2RlbCgnS2luZ3NDdXBSdWxlYm9vaycsIEtpbmdzQ3VwUnVsZWJvb2tTY2hlbWEpO1xyXG59XHJcblxyXG4vLyBHRVRURVJTXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRCeUlkKGlkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBRLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIEtpbmdzQ3VwUnVsZWJvb2tNb2RlbC5maW5kQnlJZChpZCwge1wiX192XCI6MH0pXHJcbiAgICAgICAgICAgIC5leGVjKChlcnIsIHJlc3VsdDogS2luZ3NDdXBSdWxlYm9vayk9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3JTZXJ2aWNlLmNyZWF0ZUVycm9yTWVzc2FnZShlcnJvckNvZGVzLkVSUk9SX05PVF9GT1VORCkpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnlLZXkoa2V5OiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBRLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIEtpbmdzQ3VwUnVsZWJvb2tNb2RlbC5maW5kKHsnaWQnOiBrZXl9LCB7XCJfX3ZcIjowfSlcclxuICAgICAgICAgICAgLmV4ZWMoKGVyciwgcmVzdWx0OiBLaW5nc0N1cFJ1bGVib29rKT0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvclNlcnZpY2UuY3JlYXRlRXJyb3JNZXNzYWdlKGVycm9yQ29kZXMuRVJST1JfTk9UX0ZPVU5EKSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGwoKSB7XHJcbiAgICByZXR1cm4gUS5Qcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBLaW5nc0N1cFJ1bGVib29rTW9kZWwuZmluZCh7fSlcclxuICAgICAgICAgICAgLmV4ZWMoKGVyciwgcmVzdWx0czogYW55W10pPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRzKTtcclxuICAgICAgICAgICAgfSlcclxuICAgIH0pXHJcbn07XHJcblxyXG4vLyBNT0RJRklFUlNcclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShydWxlYm9vazogS2luZ3NDdXBSdWxlYm9vaykge1xyXG4gICAgbGV0IG9iaiA9IG5ldyBLaW5nc0N1cFJ1bGVib29rTW9kZWwocnVsZWJvb2spO1xyXG4gICAgcmV0dXJuIFEubmludm9rZShvYmosIFwic2F2ZVwiKVxyXG4gICAgICAgIC50aGVuKChyZXN1bHQpPT57XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRbMF07XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUocnVsZWJvb2s6IEtpbmdzQ3VwUnVsZWJvb2spIHtcclxuICAgIHJldHVybiBRLm5pbnZva2UocnVsZWJvb2ssIFwic2F2ZVwiKVxyXG4gICAgICAgIC50aGVuKChyZXN1bHQpPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0WzBdLnRvT2JqZWN0KCk7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbi8vIFJFTU9WRVxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKHJ1bGVib29rOktpbmdzQ3VwUnVsZWJvb2spIHtcclxuICAgIHJldHVybiBRLlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIEtpbmdzQ3VwUnVsZWJvb2tNb2RlbC5maW5kQnlJZEFuZFJlbW92ZShydWxlYm9vay5rZXkpXHJcbiAgICAgICAgICAgIC5leGVjKChlcnIsIHJlc3VsdCk9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy8gU0NIRU1BXHJcbmV4cG9ydCB2YXIgS2luZ3NDdXBSdWxlYm9va1NjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgaWQ6IHt0eXBlOiBTdHJpbmcsIGluZGV4ZWQ6IHRydWV9LFxyXG4gICAgbmFtZToge3R5cGU6IFN0cmluZ30sXHJcbiAgICBhdXRob3I6IHt0eXBlOiBTdHJpbmd9LFxyXG4gICAgZGVzY3JpcHRpb246IHt0eXBlOiBTdHJpbmd9LFxyXG4gICAgcmVhZE9ubHk6IHt0eXBlOiBCb29sZWFufSxcclxuXHJcbiAgICBydWxlMToge3R5cGU6IFN0cmluZ30sXHJcbiAgICBydWxlMjoge3R5cGU6IFN0cmluZ30sXHJcbiAgICBydWxlMzoge3R5cGU6IFN0cmluZ30sXHJcbiAgICBydWxlNDoge3R5cGU6IFN0cmluZ30sXHJcbiAgICBydWxlNToge3R5cGU6IFN0cmluZ30sXHJcbiAgICBydWxlNjoge3R5cGU6IFN0cmluZ30sXHJcbiAgICBydWxlNzoge3R5cGU6IFN0cmluZ30sXHJcbiAgICBydWxlODoge3R5cGU6IFN0cmluZ30sXHJcbiAgICBydWxlOToge3R5cGU6IFN0cmluZ30sXHJcbiAgICBydWxlMTA6IHt0eXBlOiBTdHJpbmd9LFxyXG4gICAgcnVsZTExOiB7dHlwZTogU3RyaW5nfSxcclxuICAgIHJ1bGUxMjoge3R5cGU6IFN0cmluZ30sXHJcbiAgICBydWxlMTM6IHt0eXBlOiBTdHJpbmd9LFxyXG59LFxyXG57XHJcbiAgICB0aW1lc3RhbXBzOiB0cnVlXHJcbn0pOyJdLCJzb3VyY2VSb290IjoiLi5cXC4uIn0=
